{"version":3,"sources":["logo.svg","components/CheckoutForm/CheckoutForm.js","api/api.js","components/Products/product.js","components/Cart/CartItem/CartItem.js","components/Cart/Cart.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","injectStripe","stripe","totalCost","useState","status","setStatus","submit","e","a","preventDefault","createToken","name","token","fetch","method","body","JSON","stringify","amount","id","ok","Error","className","onSubmit","type","disabled","title","price","category","Product","onAddToCartClick","onClick","CartItem","cost","quantity","onRemoveButtonClick","toFixed","Cart","itemsInCart","length","map","item","key","App","setItemsInCart","reduce","acc","src","logo","alt","items","find","apiKey","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fd275339.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\r\nimport { CardElement, injectStripe } from \"react-stripe-elements\";\r\n\r\n// CardElement includes input for all of the required card fieds, card number, exp date and cvc\r\n//CardElement Also handles client side validation\r\n//injectStripe returns new component with stripe object injected\r\n\r\nimport \"./CheckoutForm.css\";\r\n\r\nfunction CheckoutForm({ stripe, totalCost }) {\r\n  const [status, setStatus] = useState(\"default\");\r\n\r\n  const submit = async (e) => {\r\n    //submit will tokenize the card info and send it to server\r\n    e.preventDefault();\r\n\r\n    setStatus(\"submitting\");\r\n\r\n    try {\r\n      let { token } = await stripe.createToken({ name: \"Name\" });\r\n\r\n      let response = await fetch(\"./netlify/function/charge\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          amount: totalCost * 100,\r\n          token: token.id,\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        setStatus(\"complete\");\r\n      } else {\r\n        throw new Error(\"Network response was not ok.\");\r\n      }\r\n    } catch (err) {\r\n      setStatus(\"error\");\r\n    }\r\n  };\r\n\r\n  if (status === \"complete\") {\r\n    return <div className=\"Checkout-complete\"> Payment successfull</div>;\r\n  }\r\n\r\n  return (\r\n    <form className=\"CheckoutForm\" onSubmit={submit}>\r\n      <h4>Would you like to complete the purchase?</h4>\r\n      <CardElement />\r\n      <button\r\n        className=\"CheckoutForm-button\"\r\n        type=\"submit\"\r\n        disabled={status === \"submitting\"}\r\n      >\r\n        {status === \"submitting\" ? \"Submitting\" : \"Submit Order\"}\r\n      </button>\r\n      {status === \"error\" && (\r\n        <div className=\"CheckoutForm-error\">Something went wrong.</div>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default injectStripe(CheckoutForm);\r\n","export default [\r\n  {\r\n    id: 1,\r\n    title: \"Shenmue\",\r\n    price: 50,\r\n    category: \"Dreamcast\"\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"Sonic Adventure\",\r\n    price: 25,\r\n    category: \"Dreamcast\"\r\n  },\r\n  {\r\n    id: 3,\r\n    title: \"Soul Calibur\",\r\n    price: 30,\r\n    category: \"Dreamcast\"\r\n  }\r\n];\r\n","import React from \"react\";\r\nimport \"./Product.css\";\r\n\r\nexport default function Product({ onAddToCartClick, price, title }) {\r\n  return (\r\n    <div className=\"Product\">\r\n      <h2 className=\"Product-title\">{title}</h2>\r\n      <div className=\"Product-price\">${price}</div>\r\n      <button className=\"Product-buy-button\" onClick={onAddToCartClick}>\r\n        Add to cart\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./CartItem.css\";\r\n\r\nexport default function CartItem({\r\n  title,\r\n  cost,\r\n  quantity,\r\n  onRemoveButtonClick,\r\n}) {\r\n  return (\r\n    <div className=\"CartItem\">\r\n      <div>{title}</div>\r\n      <div className=\"CartItem-details\">\r\n        <div className=\"CartItem-quantity\">Qty: {quantity}</div>\r\n        <div>${cost.toFixed(2)}</div>\r\n        <button className=\"button\" onClick={onRemoveButtonClick}>\r\n          Remove\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport CartItem from \"./CartItem/CartItem\";\r\nimport \"./Cart.css\";\r\n\r\nexport default function Cart({ itemsInCart, totalCost }) {\r\n  return (\r\n    <div className=\"Cart\">\r\n      <h2 className=\"Cart-title\">Your shopping cart</h2>\r\n      {itemsInCart.length > 0 ? (\r\n        <div>\r\n          {itemsInCart.map((item) => (\r\n            <CartItem\r\n              key={item.id}\r\n              title={item.title}\r\n              cost={item.price * item.quantity}\r\n              quantity={item.quantity}\r\n            />\r\n          ))}\r\n          <div className=\"Cart-totl-cost\">\r\n            Total cost: ${totalCost.toFixed(2)}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div>Your cart is Empty</div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport { Elements, StripeProvider } from \"react-stripe-elements\";\nimport CheckoutForm from \"./components/CheckoutForm/CheckoutForm\";\nimport items from \"./api/api\";\nimport Product from \"./components/Products/product\";\nimport Cart from \"./components/Cart/Cart\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [itemsInCart, setItemsInCart] = useState([]);\n\n  const handleAddToCartClick = (id) => {\n    setItemsInCart((itemsInCart) => {\n      const itemInCart = itemsInCart.find((item) => item.id === id);\n\n      // if item is already in cart, update the quantity\n      if (itemInCart) {\n        return itemsInCart.map((item) => {\n          if (item.id !== id) return item;\n          return { ...item, quantity: item.quantity + 1 };\n        });\n      }\n\n      //otherwise, add new item to cart\n      const item = items.find((item) => item.id === id);\n      return [...itemsInCart, { ...item, quantity: 1 }];\n    });\n  };\n\n  const totalCost = itemsInCart.reduce(\n    (acc, item) => acc + item.price * item.quantity,\n    0\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1 className=\"App-header-text\">My Shop</h1>\n      </header>\n      <main className=\"App-shop\">\n        <div className=\"App-products\">\n          {items.map((items) => (\n            <Product\n              key={items.title}\n              title={items.title}\n              price={items.price}\n              onAddToCartClick={() => handleAddToCartClick(items.id)}\n            />\n          ))}\n        </div>\n        <Cart itemsInCart={itemsInCart} totalCost={totalCost} />\n        {itemsInCart.length > 0 && (\n          <StripeProvider apiKey=\"your_public_key\">\n            <Elements>\n              <CheckoutForm totalCost={totalCost} />\n            </Elements>\n          </StripeProvider>\n        )}\n      </main>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}